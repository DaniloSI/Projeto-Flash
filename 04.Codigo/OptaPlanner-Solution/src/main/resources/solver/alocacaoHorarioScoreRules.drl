
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import java.util.Set;
import java.util.ArrayList;

import model.dominio.Alocacao
import model.dominio.Disciplina
import model.dominio.Horario
import model.dominio.Professor


global HardMediumSoftScoreHolder scoreHolder;

rule "Disciplinas do mesmo período não podem estar alocadas no mesmo horário"

    when
        $a : Alocacao() // armazena todas as alocacoes existentes

        Alocacao(
            $disciplina: disciplina,
            $periodo: disciplina.periodo,
            $horario : horario
        )

        exists (
            Alocacao(
                disciplina != $disciplina,
                disciplina.periodo == $periodo,
                horario == $horario
            ) from $a
        )

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );

end


rule "Um professor nao pode ter um intervalo maior ou igual a tres horas entre dois horarios de aula"

    when
        $a : Alocacao()

        Alocacao(
            $professor : professor,
            $horario : horario != null,
            $disciplina : disciplina
        )

        // Verificando se existe alguma disciplina de um determinado professor alocada antes de outra disciplina
        // desse mesmo professor em um determinado dia.
        exists (
            Alocacao(
                professor == $professor,
                horario != null,
                horario.diaSemana == $horario.diaSemana,
                disciplina != $disciplina,
                horario.horaInicio > $horario.horaFim
            ) from $a
        )

        // Verificando nao existe um intervalo de 3 horas entre duas disciplinas de um professor em um mesmo dia.
        // Se verdadeiro, entao a regra foi quebrada.
        not (
            Alocacao(
                professor == $professor,
                horario != null,
                horario.diaSemana == $horario.diaSemana,
                disciplina != $disciplina,
                horario.horaInicio > $horario.horaFim,
                (horario.horaInicio - $horario.horaFim) < 3
            ) from $a
        )

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );

end

rule "Um professor nao pode estar alocado em horarios conflitantes"

    when
        $a : Alocacao(
            $professor : professor,
            $horario : horario != null
        )

        // Verificando se existe mais de uma allocation de um professor em que os horarios sao iguais.
        $total : Number( intValue > 1 )
                    from accumulate(
                        Alocacao(
                            horario != null,
                            professor == $professor,
                            horario == $horario
                        ),
                        init( int total = 0; ),
                        action( total += 1; ),
                        result( total )
                    )

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );

end

rule "Uma disciplina nao pode ser alocada mais de uma vez no mesmo dia"

    when
        $a: Alocacao()

        Alocacao(
            $disciplina : disciplina,
            $horario : horario != null
        )

        $total : Number(intValue > 1)
            from accumulate(
                Alocacao(
                    disciplina == $disciplina,
                    horario != null,
                    horario.diaSemana == $horario.diaSemana
                ),
                init(int total = 0;),
                action(total += 1;),
                result(total)
            )

    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);

end

rule "Disciplinas a partir do quinto período devem estar alocadas apenas no turno matutino"

    when
        $a : Alocacao()

        exists(
            Alocacao(
                disciplina.periodo >= 5,
                horario != null,
                horario.horaFim > 12
            ) from $a
        )

    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end
