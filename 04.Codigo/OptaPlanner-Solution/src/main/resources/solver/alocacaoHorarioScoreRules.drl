
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import java.util.Set;
import java.util.ArrayList;

import domain.Alocacao
import domain.Subject
import domain.Address
import domain.Schedule
import domain.PreRequisito
import domain.Teacher


global HardMediumSoftScoreHolder scoreHolder;

rule "Disciplinas do mesmo período não podem estar alocadas no mesmo horário"

    when
        // Opção 1 funcionando.
        $alocacoes: Alocacao() // armazena todas as alocacoes existentes

        Alocacao($s: subject, $p: subject.period, $h : schedule) //

        exists (
            Alocacao(
                subject != $s,
                subject.period == $p,
                schedule == $h
            ) from $alocacoes
        )

        //Opção 2 funcionando.
        /*$schedule: Schedule()
        $total: Number( intValue > 1 )
                from accumulate( Alocacao($schedule == schedule),
                                 init( int total = 0; ),
                                 action( total += 1; ),
                                 result( total ) )*/

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );

    end


rule "Um teacher nao pode ter um intervalo maior ou igual a tres horas entre dois schedules de aula"

    when

        $alocacoes : Alocacao()

        Alocacao($p : teacher, schedule != null, $h : schedule, $s : subject)

        // Verificando se existe alguma subject de um determinado teacher alocada antes de outra subject
        // desse mesmo teacher em um determinado dia.
        exists (
            Alocacao(
                teacher == $p,
                schedule.dayWeek == $h.dayWeek,
                subject != $s,
                schedule.initHour > $h.finalHour
            ) from $alocacoes
        )

        // Verificando nao existe um intervalo de 3 horas entre duas disciplinas de um teacher em um mesmo dia.
        // Se verdadeiro, entao a regra foi quebrada.
        not (
            Alocacao(
                teacher == $p,
                schedule.dayWeek == $h.dayWeek,
                subject != $s,
                schedule.initHour > $h.finalHour,
                (schedule.initHour - $h.finalHour) < 3
            ) from $alocacoes
        )

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );
    end


rule "Um teacher nao pode estar alocado em schedules conflitantes"

    when

        $alocacao : Alocacao($teacher : teacher, $schedule : schedule != null)

        // Verificando se existe mais de uma alocacao de um teacher em que os schedules sao iguais.
        $total : Number( intValue > 1 )
                    from accumulate(
                        Alocacao(
                            schedule != null,
                            teacher == $teacher,
                            schedule == $schedule
                        ),
                        init( int total = 0; ),
                        action( total += 1; ),
                        result( total )
                    )

    then
        // System.out.println("Teacher - > " + $teacher.getName() + " | Schedule -> " + $schedule.getStrDiaSemana() + " " + $schedule.getInitSchedule());
        scoreHolder.addHardConstraintMatch( kcontext, -1 );
    end