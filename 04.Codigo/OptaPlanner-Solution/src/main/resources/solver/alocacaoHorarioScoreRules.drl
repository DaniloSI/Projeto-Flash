
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import java.util.Set;
import java.util.ArrayList;

import domain.Alocacao
import domain.Disciplina
import domain.Endereco
import domain.Horario
import domain.PreRequisito
import domain.Professor


global HardMediumSoftScoreHolder scoreHolder;

rule "Disciplinas do mesmo período não podem estar alocadas no mesmo horário"

    when
        // Opção 1 funcionando.
        $alocacoes: Alocacao()

        Alocacao($d: disciplina, $p: disciplina.periodo, $h : horario)

        exists (
            Alocacao(
                disciplina != $d,
                disciplina.periodo == $p,
                horario == $h
            ) from $alocacoes
        )

        //Opção 2 funcionando.
        /*$horario: Horario()
        $total: Number( intValue > 1 )
                from accumulate( Alocacao($horario == horario),
                                 init( int total = 0; ),
                                 action( total += 1; ),
                                 result( total ) )*/

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );

    end


rule "Um professor nao pode ter um intervalo maior ou igual a tres horas entre dois horarios de aula"

    when

        $alocacoes : Alocacao()

        Alocacao($p : professor, horario != null, $h : horario, $d : disciplina)

        // Verificando se existe alguma disciplina de um determinado professor alocada antes de outra disciplina
        // desse mesmo professor em um determinado dia.
        exists (
            Alocacao(
                professor == $p,
                horario.diaSemana == $h.diaSemana,
                disciplina != $d,
                horario.horaInicio > $h.horaFim
            ) from $alocacoes
        )

        // Verificando nao existe um intervalo de 3 horas entre duas disciplinas de um professor em um mesmo dia.
        // Se verdadeiro, entao a regra foi quebrada.
        not (
            Alocacao(
                professor == $p,
                horario.diaSemana == $h.diaSemana,
                disciplina != $d,
                horario.horaInicio > $h.horaFim,
                (horario.horaInicio - $h.horaFim) < 3
            ) from $alocacoes
        )

    then
        scoreHolder.addHardConstraintMatch( kcontext, -1 );
    end


rule "Um professor nao pode estar alocado em horarios conflitantes"

    when

        $alocacao : Alocacao($professor : professor, horario != null, $horario : horario)

        // Verificando se existe mais de uma alocacao de um professor em que os horarios sao iguais.
        $total : Number( intValue > 1 )
                    from accumulate(
                        Alocacao(
                            horario != null,
                            professor == $professor,
                            horario == $horario
                        ),
                        init( int total = 0; ),
                        action( total += 1; ),
                        result( total )
                    )

    then
        // System.out.println("Professor - > " + $professor.getNome() + " | Horario -> " + $horario.getStrDiaSemana() + " " + $horario.getHorarioInicio());
        scoreHolder.addHardConstraintMatch( kcontext, -1 );
    end